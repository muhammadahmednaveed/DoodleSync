@page "/whiteboard"
@using Excubo.Blazor.Canvas
@using DoodleSync.Client.Models
@using DoodleSync.Client.Services
@inject EventStore EventStore

<div class="whiteboard-container">
    <div class="toolbar">
        <button class="btn btn-danger" @onclick="ClearCanvas">Clear Canvas</button>
    </div>
    <Canvas @ref="canvas" 
           width="800" 
           height="600"
           @onmousedown="StartDrawing"
           @onmousemove="Draw"
           @onmouseup="StopDrawing"
           @onmouseleave="StopDrawing" />
</div>

@code {
    private Canvas? canvas;
    private Context2D? context;
    private bool isDrawing = false;
    private double lastX;
    private double lastY;

    protected override async Task OnInitializedAsync()
    {
        EventStore.OnEventAdded += HandleEvent;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && canvas != null)
        {
            context = await canvas.GetContext2DAsync();
            await SetupCanvas();
            
            // Replay existing events
            foreach (var evt in EventStore.Events)
            {
                await HandleEvent(evt);
            }
        }
    }

    private async Task SetupCanvas()
    {
        if (context == null) return;

        await context.SetLineCapAsync(LineCap.Round);
        await context.SetLineJoinAsync(LineJoin.Round);
        await context.SetLineWidthAsync(2);
        await context.SetStrokeStyleAsync("#000000");
    }

    private async Task StartDrawing(MouseEventArgs e)
    {
        isDrawing = true;
        lastX = e.OffsetX;
        lastY = e.OffsetY;
        EventStore.AddEvent(new StartDrawingEvent { X = e.OffsetX, Y = e.OffsetY });
    }

    private async Task Draw(MouseEventArgs e)
    {
        if (!isDrawing) return;
        EventStore.AddEvent(new DrawToEvent { X = e.OffsetX, Y = e.OffsetY });
    }

    private async Task StopDrawing(MouseEventArgs e)
    {
        if (!isDrawing) return;
        isDrawing = false;
        EventStore.AddEvent(new EndDrawingEvent { X = e.OffsetX, Y = e.OffsetY });
    }

    private async Task HandleEvent(DrawingEvent evt)
    {
        if (context == null) return;

        switch (evt)
        {
            case StartDrawingEvent start:
                await context.BeginPathAsync();
                await context.MoveToAsync(start.X, start.Y);
                break;
            case DrawToEvent draw:
                await context.LineToAsync(draw.X, draw.Y);
                await context.StrokeAsync();
                await context.BeginPathAsync();
                await context.MoveToAsync(draw.X, draw.Y);
                break;
            case EndDrawingEvent:
                await context.StrokeAsync();
                break;
            case ClearCanvasEvent:
                await context.ClearRectAsync(0, 0, 800, 600);
                break;
        }
    }

    private void ClearCanvas()
    {
        EventStore.Clear();
    }

    public void Dispose()
    {
        EventStore.OnEventAdded -= HandleEvent;
    }
}

<style>
    .whiteboard-container {
        display: flex;
        flex-direction: column;
        gap: 1rem;
        padding: 1rem;
    }

    canvas {
        border: 1px solid #ccc;
        cursor: crosshair;
    }

    .toolbar {
        display: flex;
        gap: 1rem;
    }
</style>
